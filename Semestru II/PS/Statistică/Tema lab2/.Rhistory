for(i in 1:n) { # x = Br
x[i] = 0;
for(j in 1:n) x[i] = (x[i]+ B[i,j]*r[j])%%2;
}
for(i in 1:n) { # y = Ax = ABr
y[i] = 0;
for(j in 1:n) y[i] = (y[i]+ A[i,j]*x[j])%%2;
}
for(i in 1:n) { # x = Cr
x[i] = 0;
for(j in 1:n) x[i] = (x[i]+ C[i,j]*r[j])%%2;
}
for(i in 1:n) { # verify if ABr==Cr
if(y[i] !=x[i]) return(FALSE);
}
return(TRUE);
}
x = c(1, 2, 3, 1)
A = matrix(x, 2, 2)
x = c(2, 1, 3, 2)
B = matrix(x, 2, 2)
x = c(8, 4, 9, 5)
C = matrix(x, 2, 2)
matrix_product(A, B, C)
leaves = c(0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0)
tree_eval = function(i, leaves) {
a = runif(1, 0, 1);
len = length(leaves);
if(log(i,2) >= log(len,2) - 1) { # copiii nodului i sunt frunze
if(a <= 0.5) {
if(leaves[2*i - len + 1] == 0) return(leaves[2*i +1 -len + 1]);
return(1);
}
else {
if(leaves[2*i + 1 -len + 1] == 0) return(leaves[2*i +1 -len + 1]);
return(1);
}
}
if((floor(log(i,2)) %% 2 == 0)) { # nodul i este de tip MIN
if(a <= 0.5) {
if(tree_eval(2*i, leaves) == 1) return(tree_eval(2*i + 1, leaves));
return(0);
else {
if(tree_eval (2*i +1, leaves) == 1) return(tree_eval (2*i, leaves));
return(0);
}
......
}
tree_eval(10, leaves)
leaves = c(0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0)
tree_eval = function(i, leaves) {
a = runif(1, 0, 1);
len = length(leaves);
if(log(i,2) >= log(len,2) - 1) { # copiii nodului i sunt frunze
if(a <= 0.5) {
if(leaves[2*i - len + 1] == 0) return(leaves[2*i +1 -len + 1]);
return(1);
}
else {
if(leaves[2*i + 1 -len + 1] == 0) return(leaves[2*i +1 -len + 1]);
return(1);
}
}
if((floor(log(i,2)) %% 2 == 0)) { # nodul i este de tip MIN
if(a <= 0.5) {
if(tree_eval(2*i, leaves) == 1) return(tree_eval(2*i + 1, leaves));
return(0);
}
else {
if(tree_eval (2*i +1, leaves) == 1) return(tree_eval (2*i, leaves));
return(0);
}
......
}
tree_eval(10, leaves)
leaves = c(0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0)
tree_eval = function(i, leaves) {
a = runif(1, 0, 1);
len = length(leaves);
if(log(i,2) >= log(len,2) - 1) { # copiii nodului i sunt frunze
if(a <= 0.5) {
if(leaves[2*i - len + 1] == 0) return(leaves[2*i +1 -len + 1]);
return(1);
}
else {
if(leaves[2*i + 1 -len + 1] == 0) return(leaves[2*i +1 -len + 1]);
return(1);
}
}
if((floor(log(i,2)) %% 2 == 0)) { # nodul i este de tip MIN
if(a <= 0.5) {
if(tree_eval(2*i, leaves) == 1) return(tree_eval(2*i + 1, leaves));
return(0);
}
else {
if(tree_eval (2*i +1, leaves) == 1) return(tree_eval (2*i, leaves));
return(0);
}
}
......
}
tree_eval(10, leaves)
leaves = c(0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0)
tree_eval = function(i, leaves) {
a = runif(1, 0, 1);
len = length(leaves);
if(log(i,2) >= log(len,2) - 1) { # copiii nodului i sunt frunze
if(a <= 0.5) {
if(leaves[2*i - len + 1] == 0) return(leaves[2*i +1 -len + 1]);
return(1);
}
else {
if(leaves[2*i + 1 -len + 1] == 0) return(leaves[2*i +1 -len + 1]);
return(1);
}
}
if((floor(log(i,2)) %% 2 == 0)) { # nodul i este de tip MIN
if(a <= 0.5) {
if(tree_eval(2*i, leaves) == 1) return(tree_eval(2*i + 1, leaves));
return(0);
}
else {
if(tree_eval (2*i +1, leaves) == 1) return(tree_eval (2*i, leaves));
return(0);
}
}
if((floor(log(i,2)) %% 2 == 0)) { # nodul i este de tip MAX
if(a > 0.5) {
if(tree_eval(2*i, leaves) == 1) return(tree_eval(2*i + 1, leaves));
return(0);
}
else {
if(tree_eval (2*i +1, leaves) == 1) return(tree_eval (2*i, leaves));
return(0);
}
}
}
tree_eval(10, leaves)
# etichetate cu MIN, iar restul cu MAX.
tree_eval = function(i, leaves) {
a = runif(1, 0, 1);
len = length(leaves);
if(log(i,2) >= log(len,2) - 1) { # copiii nodului i sunt frunze
if(a <= 0.5) {
if(leaves[2*i - len + 1] == 0) return(leaves[2*i +1 -len + 1]);
return(1);
}
else {
if(leaves[2*i + 1 -len + 1] == 0) return(leaves[2*i +1 -len + 1]);
return(1);
}
}
if((floor(log(i,2)) %% 2 == 0)) { # nodul i este de tip MIN
if(a <= 0.5) {
if(tree_eval(2*i, leaves) == 1) return(tree_eval(2*i + 1, leaves));
return(0);
}
else {
if(tree_eval (2*i +1, leaves) == 1) return(tree_eval (2*i, leaves));
return(0);
}
}
if((floor(log(i,2)) %% 2 == 0)) { # nodul i este de tip MAX
if(a > 0.5) {
if(tree_eval(2*i, leaves) == 1) return(tree_eval(2*i + 1, leaves));
return(0);
}
else {
if(tree_eval (2*i +1, leaves) == 1) return(tree_eval (2*i, leaves));
return(0);
}
}
}
leaves = c(0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0)
tree_eval(10, leaves)
# etichetate cu MIN, iar restul cu MAX.
tree_eval = function(i, leaves) {
a = runif(1, 0, 1);
len = length(leaves);
if(log(i,2) >= log(len,2) - 1) { # copiii nodului i sunt frunze
if(a <= 0.5) {
if(leaves[2*i - len + 1] == 0) return(leaves[2*i +1 -len + 1]);
return(1);
}
else {
if(leaves[2*i + 1 -len + 1] == 0) return(leaves[2*i +1 -len + 1]);
return(1);
}
}
if((floor(log(i,2)) %% 2 == 0)) { # nodul i este de tip MIN
if(a <= 0.5) {
if(tree_eval(2*i, leaves) == 1) return(tree_eval(2*i + 1, leaves));
return(0);
}
else {
if(tree_eval (2*i +1, leaves) == 1) return(tree_eval (2*i, leaves));
return(0);
}
}
if((floor(log(i,2)) %% 2 == 0)) { # nodul i este de tip MAX
if(a > 0.5) {
if(tree_eval(2*i, leaves) == 1) return(tree_eval(2*i + 1, leaves));
return(1);
}
else {
if(tree_eval (2*i +1, leaves) == 1) return(tree_eval (2*i, leaves));
return(1);
}
}
}
leaves = c(0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0)
tree_eval(10, leaves)
p = runif(5)
setwd("D:/Facultate/Semestru II/PS/Statistică/Lab3")
p = runif(5)
p = runif(5)
tablou_repartitie = function(n) {
x = sample(n)
suma = 1
while(suma>0) {
p = runif(n, 0.1, n)
n = n-p
}
A = matrix( , 2, n)
A[1, ] = x
A[2, ] = p
}
A
tablou_repartitie = function(n) {
x = sample(n)
suma = 1
while(suma>0) {
p = runif(n, 0.1, n)
n = n-p
}
A = matrix( , 2, n)
A[1, ] = x
A[2, ] = p
A
}
tablou(5)
## Ex 1
# Reprezentati functie de masa de probabilitate a distributiei binomiale B(n, p), si apoi functiile de
# masa de probabilitate Poisson(lambda) si Geometric(p) - doar primele k valori, k fiind un parametru dat.
binom = function(n, p) {
return (barplot(dbinom(1:n, n, p), main = 'grafic', col = 'red'))
}
binom(20, 0.4)
poisson = function(lambda, k) {
return (barplot(dpois(1:k, lambda), col = 'blue'))
}
poisson(12, 20)
geometric = function(p, k) {
return (barplot(dgeom(k, p), col = 'yellow'))
}
geometric(0.4, 0:20)
## Ex 2
# Determinati mediana, media, deviatia standard, cvartilele si valorile aberante (daca exista).
x = scan("ex2.txt")
mediana = median(x)
cat("Mediana =", mediana, "\n")
media = mean(x)
cat("Media =", media, "\n")
deviatia = sd(x)
cat ("Deviatia standard =", deviatia, "\n")
y = summary(x)
y
Q1 = y[2]
Q1
Q3 = y[5]
Q3
valori_aberante = function(x) {
j = 0;
m = mean(x)
s = sd(x)
rez = vector()
for(i in 1:length(x)) {
if (x[i] < m-2*s | x[i] > m+2*s) {
j = j+1
rez[j] = x[i]
}
}
rez
}
valori_aberante(x)
## Ex 3
# Sa se determine media, mediana, deviatia standard, quartilele si sa se afle (daca exista) valorile
# aberante ale esantionului.
note_admitere = c(6.50, 8.60, 9.60, 7.25, 8.50, 9.95, 6.66, 6.40, 7.75, 7.66, 8.60, 9.33, 7.80, 9.85, 9.50, 5.50, 7.60, 7.25, 8.50, 9.70, 9.50, 8.25, 7.50, 8.66, 7.50, 9.00, 8.50, 9.33, 8.33, 9.90, 8.75, 5.60, 6.50, 6.75, 8.20, 8.33, 9.50, 8.66, 6.50, 7.25, 9.50, 9.33)
mean(note_admitere)
mediana = median(note_admitere)
cat("Mediana =", mediana, "\n")
media = mean(note_admitere)
cat("Media =", media, "\n")
deviatia = sd(note_admitere)
cat ("Deviatia standard =", deviatia, "\n")
y = summary(note_admitere)
y
Q1 = y[2]
Q1
Q3 = y[5]
Q3
valori_aberante = function(x) {
j = 0;
m = mean(x)
s = sd(x)
rez = vector()
for(i in 1:length(x)) {
if (x[i] < m-2*s | x[i] > m+2*s) {
j = j+1
rez[j] = x[i]
}
}
rez
}
valori_aberante(note_admitere)
binom = function(n, p) {
return (barplot(dbinom(1:n, n, p), main = 'grafic', col = 'red'))
}
binom(20, 0.4)
poisson = function(lambda, k) {
return (barplot(dpois(1:k, lambda), col = 'blue'))
}
poisson(12, 20)
geometric = function(p, k) {
return (barplot(dgeom(k, p), col = 'yellow'))
}
geometric(0.4, 0:20)
x = scan("ex2.txt")
mediana = median(x)
cat("Mediana =", mediana, "\n")
media = mean(x)
cat("Media =", media, "\n")
deviatia = sd(x)
cat ("Deviatia standard =", deviatia, "\n")
y = summary(x)
y
Q1 = y[2]
Q1
Q3 = y[5]
Q3
valori_aberante = function(x) {
j = 0;
m = mean(x)
s = sd(x)
rez = vector()
for(i in 1:length(x)) {
if (x[i] < m-2*s | x[i] > m+2*s) {
j = j+1
rez[j] = x[i]
}
}
rez
}
valori_aberante(x)
quicksort = function(S)
{
if(length(S)>1)
{
x = sample(1:length(S), 1);
pivot = S[x];
li = 1;
ls = length(S);
while(li <= ls)
{
while(S[li] < pivot) li = li + 1;
while(S[ls] > pivot) ls = ls - 1;
if(li <= ls)
{
aux = S[li];
S[li] = S[ls];
S[ls] = aux;
li = li + 1;
ls = ls - 1;
}
}
return (c(quicksort(S[S<pivot]), pivot, quicksort(S[S>pivot])));
}
return (S);
}
x = c(10, 5, -8, 2, 12, 20, 1, -3)
quicksort(x)
source('D:/Facultate/Semestru II/PS/Statistică/Tema lab4/Tema PS lab4.R')
retea = function(N)
{
s = 0;
for(i in 1:N) {
x = rexp(1,1);
g1 = rgamma(1, shape=5, scale=3);
g2 = rgamma(1, shape=7, scale=5);
g3 = rgamma(1, shape=5, scale=2);
u = runif(1,0,1);
if(u <= 0.5) s = s+g1;
else
{
if(u > 0.8) s = s+g3;
else s = s+g2;
}
s = s+x;
}
return (s/N);
}
integration_a=function(N)
{
s=0;
for(i in 1:N)
{
u=runif(1,0,1);
si=sin(20*u);
co=cos(50*u);
s=s+(co+si)*(co+si);
}
return (s/N);
}
integration_a(10000)
integration_a(20000)
integration_a(50000)
integration_b=function(N)
{
s=0;
for(i in 1:N)
{
x=runif(1,0,3);
s=s+(x^3)/(x^4+1);
}
return (3*s/N);
}
integration_b(10000)
integration_b(20000)
integration_b(50000)
retea = function(N)
{
s = 0;
for(i in 1:N) {
x = rexp(1,1);
g1 = rgamma(1, shape=5, scale=3);
g2 = rgamma(1, shape=7, scale=5);
g3 = rgamma(1, shape=5, scale=2);
u = runif(1,0,1);
if(u <= 0.5) s = s+g1;
else
{
if(u > 0.8) s = s+g3;
else s = s+g2;
}
s = s+x;
}
return (s/N);
}
retea = function(N)
{
s = 0;
for(i in 1:N) {
x = rexp(1,1);
g1 = rgamma(1, shape=5, scale=3);
g2 = rgamma(1, shape=7, scale=5);
g3 = rgamma(1, shape=5, scale=2);
u = runif(1,0,1);
if(u <= 0.5) s = s+g1
else
{
if(u > 0.8) s = s+g3
else s = s+g2
}
s = s+x
}
return (s/N);
}
retea = function(N)
{
s = 0;
for(i in 1:N) {
x = rexp(1,1);
g1 = rgamma(1, shape=5, scale=3);
g2 = rgamma(1, shape=7, scale=5);
g3 = rgamma(1, shape=5, scale=2);
u = runif(1,0,1);
if(u <= 0.5) s = s+g1
else
{
if(u > 0.8) s = s+g3
else s = s+g2
}
s = s+x
}
return (s/N)
}
conturi = function()
{
nr_days=1;
p=0.25;
nr=19;
nr=nr-rbinom(1, 19, 0.25);
print(nr);
while(nr>0 & nr<20)
{
nr_days=nr_days+1;
p=1-0.75^(20-nr);
c=rbinom(1, nr, p);
nr=nr-c+5;
}
return (nr);
}
toateconturile=function(N)
{
sum=0;
for(i in 1:N)
{
if(conturi()>=20) sum=sum+1;
}
return (sum/N);
}
