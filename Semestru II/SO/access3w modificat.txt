/*
* Program: access3w.c
*
* Functionalitate: versiunea 3 (in varianta cu lacat pus in mod blocant) a programului demonstrativ de acces
*                  concurent/exclusiv a doua procese la un fisier
*/
#include <unistd.h>
#include <stdlib.h>
#include <stdio.h>
#include <fcntl.h>
#include <errno.h>


int main(int argc, char* argv[])
{
  int          fd, codRead;
  char         ch;
  struct flock lacat;

  /* verificarea existentei argumentului in linia de comanda */
  if(argv[1] == NULL)
  {
    fprintf(stderr,"Programul trebuie apelat cu cel putin un parametru.\n");
    exit(1);
  }

  /* deschiderea fisierului de date */
  if(-1 == (fd=open("fis.dat", O_RDWR)) )
  { /* trateaza cazul de eroare la deschidere */
    perror("Nu pot deschide fisierul fis.dat deoarece ");
    exit(2);
  }

  /* pregatirea unui lacat pe caracterul de la pozitia curenta */
  lacat.l_type   = F_WRLCK;
  lacat.l_whence = SEEK_CUR;
  lacat.l_start  = 0;
  lacat.l_len    = 1;

  /* parcurgerea fisierului caracter cu caracter pana la EOF */
  while(0 != (codRead = read(fd,&ch,1)) )
  {
    if (-1 == codRead) { perror("Eroare la apelul read"); exit(3); } /* trateaza cazul de eroare la citire */

    if(ch == '#')
    { /* am intalnit primul # din fisier */
      if(-1 == lseek(fd,-1L,1) ) { perror("Eroare la apelul lseek"); exit(4); }

      /* O singura incercare de punere a lacatului in mod blocant */
      printf("Pun blocant lacatul pe #-ul gasit deja [Proces:%d].\n",getpid());
      if(-1 == fcntl(fd,F_SETLKW,&lacat) )
      { 
        fprintf(stderr,"Eroare la blocaj [ProcesID:%d].\n", getpid());
        perror("\tMotivul");
        exit(5);
      }
      else
        printf("Blocaj reusit [ProcesID:%d].\n", getpid());

	codRead = read(fd, &ch, 1);
	if(-1 == codRead) {
		perror("err la read");
		exit(8);
	}
	if(ch == '#') {
      		sleep(10);
		if(-1 == lseek(fd, -1L, 1)) { perror("Eroare"); exit(9); }
      		if(-1 == write(fd,argv[1],1) ) { perror("Eroare la apelul write"); exit(6); }
      		printf("Terminat. S-a inlocuit primul # gasit in fisierul fis.dat [ProcesID:%d].\n",getpid());
      		return 0;
	}
    }
  }

  close(fd);  
  printf("Terminat. Nu exista # in fisierul fis.dat [ProcesID:%d].\n",getpid());
  return 0;
}