retea = function(N)
{
s = 0;
for(i in 1:N) {
x = rexp(1,1);
g1 = rgamma(1, shape=5, scale=3);
g2 = rgamma(1, shape=7, scale=5);
g3 = rgamma(1, shape=5, scale=2);
u = runif(1,0,1);
if(u <= 0.5) s = s+g1
else
{
if(u > 0.8) s = s+g3
else s = s+g2
}
s = s+x
}
return (s/N)
}
retea(3)
conturi = function()
{
nr_days=1;
p=0.25;
nr=19;
nr=nr-rbinom(1, 19, 0.25);
print(nr);
while(nr>0 & nr<20)
{
nr_days=nr_days+1;
p=1-0.75^(20-nr);
c=rbinom(1, nr, p);
nr=nr-c+5;
}
return (nr);
}
conturi()
conturi = function()
{
nr_days=1;
p=0.25;
nr=19;
nr=nr-rbinom(1, 19, 0.25);
print(nr);
while(nr>0 & nr<20)
{
nr_days=nr_days+1;
p=1-0.75^(20-nr);
c=rbinom(1, nr, p);
nr=nr-c+5;
}
return (nr);
}
conturi()
estimated_error_probl = function(p, pr, epsilon)
{
alfa = 1-pr;
z = qnorm(alfa/2);
N_min = (1-p)*p*(z/epsilon)^2;
print(N_min)
}
estimated_error_probl(0.01, 0.99, 1)
z_confidence_interval = function(n, sample_mean, alfa, sig)
{
sigma = sqrt(sig);
critical_z = qnorm(1-alfa/2, 0, 1);
a = sample_mean - critical_z*sigma/sqrt(n);
b = sample_mean + critical_z*sigma/sqrt(n);
interval = c(a, b);
return (interval);
}
z_confidence_interval(8, 2.75, 0.01, 0.25)
t_conf_interval = function(n, sample_mean, alfa, s)
{
se = s/sqrt(n);
critical_t = qt(1-alfa/2, n-1)
a = sample_mean - critical_t*se;
b = sample_mean + critical_t*se;
interval = c(a,b);
return (interval);
}
t_conf_interval(8, 2.75, 0.01, 0.5)
integration_a=function(N)
{
s=0;
for(i in 1:N)
{
u=runif(1,0,1);
si=sin(20*u);
co=cos(50*u);
s=s+(co+si)*(co+si);
}
return (s/N);
}
integration_a(10000)
integration_a(20000)
integration_a(50000)
integration_b=function(N)
{
s=0;
for(i in 1:N)
{
x=runif(1,0,3);
s=s+(x^3)/(x^4+1);
}
return (3*s/N);
}
integration_b(10000)
integration_b(20000)
integration_b(50000)
retea = function(N)
{
s = 0;
for(i in 1:N) {
x = rexp(1,1);
g1 = rgamma(1, shape=5, scale=3);
g2 = rgamma(1, shape=7, scale=5);
g3 = rgamma(1, shape=5, scale=2);
u = runif(1,0,1);
if(u <= 0.5) s = s+g1
else
{
if(u > 0.8) s = s+g3
else s = s+g2
}
s = s+x
}
return (s/N)
}
retea(50000)
t_test = function(esantion, miu0, alfa, tip)
{
n = length(esantion);
sample_mean = mean(esantion);
s = sd(esantion);
se = s/sqrt(n);
critical_t = qt(alfa, n-1);
t_score = (sample_mean - miu0)/se;
if(tip == -1)
{
critical_t = qt(alfa, n - 1)
if(t_score < critical_t)
print("Ipoteza nula este respinsa")
else
print("Ipoteza nula nu poate fi respinsa!")
}
else if(tip == 0)
{
critical_t = qt(1 - alfa, n - 1);
if(t_score > critical_t)
print("Ipoteza nula este respinsa")
else
print("Ipoteza nula nu poate fi respinsa!")
}
else
{
critical_t = qt(1-alfa/2, n-1)
if(abs(t_score) > abs(critical_t))
print("Ipoteza nula este respinsa")
else
print("Ipoteza nula nu poate fi respinsa!")
}
#  print(critical_t);
#  print(t_score);
}
t_test(c(1.64, 1.54, 1.56, 1.57, 1.44, 1.48, 1.56), 1.6, 0.01)
t_test = function(esantion, miu0, alfa, tip)
{
n = length(esantion);
sample_mean = mean(esantion);
s = sd(esantion);
se = s/sqrt(n);
critical_t = qt(alfa, n-1);
t_score = (sample_mean - miu0)/se;
if(tip == -1)
{
critical_t = qt(alfa, n - 1)
if(t_score < critical_t)
print("Ipoteza nula este respinsa")
else
print("Ipoteza nula nu poate fi respinsa!")
}
else if(tip == 0)
{
critical_t = qt(1 - alfa, n - 1);
if(t_score > critical_t)
print("Ipoteza nula este respinsa")
else
print("Ipoteza nula nu poate fi respinsa!")
}
else
{
critical_t = qt(1-alfa/2, n-1)
if(abs(t_score) > abs(critical_t))
print("Ipoteza nula este respinsa")
else
print("Ipoteza nula nu poate fi respinsa!")
}
#  print(critical_t);
#  print(t_score);
}
t_test(c(1.64, 1.54, 1.56, 1.57, 1.44, 1.48, 1.56), 1.6, 0.01, -1)
z_test_means = function(n1, n2, sample_mean1, sample_mean2, sigma1, sigma2, alfa, miu0, tip)
{
combined_sigma = sqrt(sigma1^2/n1 + sigma2^2/n2);
critical_z = qnorm(1-alfa/2);
z_score = (sample_mean1 - sample_mean2 - miu0)/combined_sigma;
if(tip == -1)
{
print("Avem: Ipoteza asimetrica la stanga!")
critical_z = qnorm(alfa, 0, 1);
if(score_z < critical_z)
print("Ipoteza nula este respinsa!")
else
print("Ipoteza nula este acceptata!")
}
else if(tip == 0)
{
print("Avem: Ipoteza asimetrica la dreapta!")
critical_z = qnorm(1-alfa, 0, 1);
if(score_z > critical_z)
print("Ipoteza nula este respinsa!")
else
print("Ipoteza nula este acceptata!")
}
else
{
print("Avem: Ipoteza simetrica!")
critical_z = qnorm(1-alfa/2, 0, 1);
if(abs(score_z) > abs(critical_z))
print("Ipoteza nula este respinsa!")
else
print("Ipoteza nula este acceptata!")
}
# print(critical_z);
# print(z_score);
}
z_test_means(155, 150, 15, 14.5, 0.75, 0.78, 0.01, 0, -1)
z_test_means = function(n1, n2, sample_mean1, sample_mean2, sigma1, sigma2, alfa, miu0, tip)
{
combined_sigma = sqrt(sigma1^2/n1 + sigma2^2/n2);
critical_z = qnorm(1-alfa/2);
score_z = (sample_mean1 - sample_mean2 - miu0)/combined_sigma;
if(tip == -1)
{
print("Avem: Ipoteza asimetrica la stanga!")
critical_z = qnorm(alfa, 0, 1);
if(score_z < critical_z)
print("Ipoteza nula este respinsa!")
else
print("Ipoteza nula este acceptata!")
}
else if(tip == 0)
{
print("Avem: Ipoteza asimetrica la dreapta!")
critical_z = qnorm(1-alfa, 0, 1);
if(score_z > critical_z)
print("Ipoteza nula este respinsa!")
else
print("Ipoteza nula este acceptata!")
}
else
{
print("Avem: Ipoteza simetrica!")
critical_z = qnorm(1-alfa/2, 0, 1);
if(abs(score_z) > abs(critical_z))
print("Ipoteza nula este respinsa!")
else
print("Ipoteza nula este acceptata!")
}
# print(critical_z);
# print(z_score);
}
z_test_means(155, 150, 15, 14.5, 0.75, 0.78, 0.01, 0, -1)
T_test_means = function(n1, n2, sample1_mean, sample2_mean, s1, s2, alfa, m0, tip)
{
critical_F_s = qf(alfa/2, n1-1, n2-1);
critical_F_d = qf(1-alfa/2, n1-1, n2-1);
F_score = s1^2/s2^2;
if(F_score < critical_F_s | F_score > critical_F_d)
{
df = min(n1-1, n2-1);
combined_s = sqrt(s1^2/n1 + s2^2/n2);
}
else
{
df = n1 + n2 - 2;
combined_s = sqrt(((n1-1)*s1^2 + (n2-1)*s2^2)/df)*sqrt(1/n1+1/n2);
}
# critical_t = qt(1-alfa/2, df);
t_score = (sample1_mean - sample2_mean - m0)/combined_s;
if(tip == -1)
{
critical_t = qt(alfa, df)
print("Ipoteza asimetrica la stanga!")
if(t_score < critical_t)
print("Ipoteza nula este respinsa!")
else
print("Nu exista suficiente dovezi pentru a respinge ipoteza nula!")
}
else if(tip == 0)
{
critical_t = qt(1 - alfa, df)
print("Ipoteza asimetrica la dreapta!")
if(t_score > critical_t)
print("Ipoteza nula este respinsa!")
else
print("Nu exista suficiente dovezi pentru a respinge ipoteza nula!")
}
else
{
critical_t = qt(1 - alfa/2, df)
print("Ipoteza simetrica!")
if(abs(t_score) > abs(critical_t))
print("Ipoteza nula este respinsa!")
else
print("Nu exista suficiente dovezi pentru a respinge ipoteza nula!")
}
print(critical_t);
print(t_score);
}
T_test_means(66, 68, 21, 20, 1.2, 1.1, 0.05, 0, -1)
test_proportion = function(alfa, n, succese, p0)
{
p_prim = succese/n;
z_score = (p_prim-p0)/sqrt(p0*(1-p0)/n);
return (z_score);
}
scorz = test_proportion(0.01, 112, 14, 0.1)
critz = qnorm(0.99, 0, 1)
scorz
critz
scorz = test_proportion(0.05, 112, 14, 0.1)
critz = qnorm(0.95, 0, 1)
scorz
critz
quicksort = function(S)
{
if(length(S) > 1)
{
x = sample(1:length(S), 1);
pivot = S[x];
li = 1;
ls = length(S);
while(li <= ls)
{
while(S[li] < pivot) li = li + 1;
while(S[ls] > pivot) ls = ls - 1;
if(li <= ls)
{
aux = S[li];
S[li] = S[ls];
S[ls] = aux;
li = li + 1;
ls = ls - 1;
}
}
return (c(quicksort(S[S<pivot]), pivot, quicksort(S[S>pivot])));
}
return (S);
}
x = c(10, 5, -8, 2, 12, 20, 1, -3)
quicksort(x)
Rand_Min_Cut = function(G)
{
while(nrow(G) > 2) 	## while there are more than 2 vertices
{
e = sample(1:nrow(G), 2, replace = T); 	## pick a random edge (u, v)
while(G[e[1],e[2]] == 0) 	## while (u, v) it's not a vertex
{
e = sample(1:nrow(G), 2, replace = T); 	## pick a random edge (u, v)
}
for(j in 1:ncol(G))
{
if(G[e[2],j] > 0 & j != e[1]) 	## if node e[2] has another edge other than e[1]
{
G[e[1],j] = G[e[1],j] + G[e[2],j]; 	## Merge u and v into a single vertex
G[j,e[1]] = G[e[1],j];
}
}
G = G[-e[2],]; ## remove e[2] vertex
G = G[,-e[2]];
}
return (G);
}
y = c(0,1,1,0,0,1,1,0,1,1,0,1,1,1,0,1,1,0,0,1,1,0,0,1,0,0,1,0,0,1,1,1,0,1,1,0)
M = matrix(y, 6, 6)
Rand_Min_Cut(M)
volum_elipsoid_de_revolutie=function(N)
{
N_C=0;
for(i in 1:N)
{
x=runif(1,-2,2);
y=runif(1,-3,3);
z=runif(1,-4,4);
if((x*x/4)+(y*y/9)+(z*z/16)<=1) N_C=N_C+1;
}
return (8*6*4*N_C/N);
}
volum_elipsoid_de_revolutie(10000)
volum_elipsoid_de_revolutie(20000)
volum_elipsoid_de_revolutie(50000)
integration_a=function(N)
{
s=0;
for(i in 1:N)
{
u=runif(1,0,1);
si=sin(20*u);
co=cos(50*u);
s=s+(co+si)*(co+si);
}
return (s/N);
}
integration_a(10000)
integration_a(20000)
integration_a(50000)
integration_b=function(N)
{
s=0;
for(i in 1:N)
{
x=runif(1,0,3);
s=s+(x^3)/(x^4+1);
}
return (3*s/N);
}
integration_b(10000)
integration_b(20000)
integration_b(50000)
retea = function(N)
{
s = 0;
for(i in 1:N) {
x = rexp(1,1);
g1 = rgamma(1, shape=5, scale=3);
g2 = rgamma(1, shape=7, scale=5);
g3 = rgamma(1, shape=5, scale=2);
u = runif(1,0,1);
if(u <= 0.5) s = s+g1
else
{
if(u > 0.8) s = s+g3
else s = s+g2
}
s = s+x
}
return (s/N)
}
retea(50000)
conturi = function()
{
nr_days=1;
p=0.25;
nr=19;
nr=nr-rbinom(1, 19, 0.25);
print(nr);
while(nr>0 & nr<20)
{
nr_days=nr_days+1;
p=1-0.75^(20-nr);
c=rbinom(1, nr, p);
nr=nr-c+5;
}
return (nr);
}
conturi()
estimated_error_probl = function(p, pr, epsilon)
{
alfa = 1-pr;
z = qnorm(alfa/2);
N_min = (1-p)*p*(z/epsilon)^2;
print(N_min)
}
estimated_error_probl(0.01, 0.99, 2.78)
estimated_error_probl = function(p, pr, epsilon)
{
alfa = 1-pr;
z = qnorm(alfa/2);
N_min = (1-p)*p*(z/epsilon)^2;
print(N_min)
}
estimated_error_probl(0.99, 0.01, 2.78)
estimated_error_probl = function(p, pr, epsilon)
{
alfa = 1-pr;
z = qnorm(alfa/2);
N_min = (1-p)*p*(z/epsilon)^2;
print(N_min)
}
estimated_error_probl(0.27, 0.99, 0.01)
z_confidence_interval = function(n, sample_mean, alfa, sig)
{
sigma = sqrt(sig);
critical_z = qnorm(1-alfa/2, 0, 1);
a = sample_mean - critical_z*sigma/sqrt(n);
b = sample_mean + critical_z*sigma/sqrt(n);
interval = c(a, b);
return (interval);
}
z_confidence_interval(8, 2.75, 0.01, 0.25)
t_conf_interval = function(n, sample_mean, alfa, s)
{
se = s/sqrt(n);
critical_t = qt(1-alfa/2, n-1)
a = sample_mean - critical_t*se;
b = sample_mean + critical_t*se;
interval = c(a,b);
return (interval);
}
t_conf_interval(8, 2.75, 0.01, 0.5)
