tree_eval = function(i, leaves) {
a = runif(1, 0, 1);
len = length(leaves);
if(log(i,2) >= log(len,2) - 1) { # copiii nodului i sunt frunze
if(a <= 0.5) {
if(leaves[2*i - len + 1] == 0) return(leaves[2*i +1 -len + 1]);
return(1);
}
else {
if(leaves[2*i + 1 -len + 1] == 0) return(leaves[2*i +1 -len + 1]);
return(1);
}
}
if((floor(log(i,2)) %% 2 == 0)) { # nodul i este de tip MIN
if(a <= 0.5) {
if(tree_eval(2*i, leaves) == 1) return(tree_eval(2*i + 1, leaves));
return(0);
}
else {
if(tree_eval (2*i +1, leaves) == 1) return(tree_eval (2*i, leaves));
return(0);
}
}
if((floor(log(i,2)) %% 2 == 0)) { # nodul i este de tip MAX
if(a > 0.5) {
if(tree_eval(2*i, leaves) == 1) return(tree_eval(2*i + 1, leaves));
return(1);
}
else {
if(tree_eval (2*i +1, leaves) == 1) return(tree_eval (2*i, leaves));
return(1);
}
}
}
leaves = c(0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0)
tree_eval(10, leaves)
tablou_repartitie = function(n) {
x = sample(n)
suma = 1
i = 1
while(suma>0) {
p = runif(1, 0.1, n)
A[2, i] = p
i = i+1
n = n-p
}
A = matrix( , 2, n)
A[1, ] = x
A[2, ] = p
A
}
tablou(5)
tablou_repartitie = function(n) {
x = sample(n)
suma = 1
i = 1
while(suma>0) {
p = runif(1, 0.1, n)
A[2, i] = p
i = i+1
n = n-p
}
A = matrix( , 2, n)
A[1, ] = x
A
}
tablou_repartitie(5)
A = matrix( , 2, n)
tablou_repartitie = function(n) {
x = sample(n)
suma = 1
i = 1
A = matrix( , 2, n)
while(suma>0) {
p = runif(1, 0.1, n)
A[2, i] = p
i = i+1
n = n-p
}
A[1, ] = x
A
}
tablou_repartitie(5)
# p1, p2, ..., pn cu runif a.i. suma lor este 1
tablou_repartitie = function(n) {
x = sample(n)
suma = 1
i = 1
A = matrix( , 2, n)
while(suma>0) {
p = runif(1, 0.1, n)
suma = suma-p
A[2, i] = p
i = i+1
n = n-p
}
A[1, ] = x
A
}
tablou_repartitie(5)
# p1, p2, ..., pn cu runif a.i. suma lor este 1
tablou_repartitie = function(n) {
x = sample(n)
suma = 1
i = 0
A = matrix( , 2, n)
for(i in 1:(n-1)) {
p = runif(1, 0, suma)
suma = suma-p
A[2, i] = p
}
A[1, ] = x
A
}
tablou_repartitie(5)
tablou_repartitie = function(n) {
suma = 1
i = 0
A = matrix(0, 2, n)
for(i in 1:(n-1)) {
p = runif(1, 0, suma)
suma = suma-p
A[2, i] = p
}
x = sample(n)
A[1, ] = x
A
}
tablou_repartitie(5)
tablou_repartitie = function(n) {
suma = 1
i = 1
A = matrix(0, 2, n)
for(i in 1:n) {
p = runif(1, 0, suma)
suma = suma-p
A[2, i] = p
}
x = sample(n)
A[1, ] = x
A
}
tablou_repartitie(5)
# p1, p2, ..., pn cu runif a.i. suma lor este 1
tablou_repartitie = function(n) {
suma = 1
i = 1
A = matrix(0, 2, n)
for(i in 1:n) {
p = runif(1, 0, suma)
suma = suma-p
A[2, i] = p
}
x = sample(n)
A[1, ] = x
A
}
tablou_repartitie(5)
# p1, p2, ..., pn cu runif a.i. suma lor este 1
tablou_repartitie = function(n) {
suma = 1
i = 1
A = matrix(0, 2, n)
for(i in 1:n) {
p = runif(1, 0, suma)
suma = suma-p
A[2, i] = p
}
x = sample(n)
A[1, ] = x
A
}
tablou_repartitie(5)
setwd("D:/Facultate/Semestru II/PS/StatisticÄƒ/Lab3")
