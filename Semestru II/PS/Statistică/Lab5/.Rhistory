# II.1
selection_mean = function(filename) {
x = scan(filename);
m = mean(x)
}
selection_mean("history.txt")
# II.1
selection_mean = function(filename) {
x = scan(filename);
m = mean(x)
m
}
selection_mean("history.txt")
normal_rule_density = function(limit, micro, sigma) {
t = seq(-limit, limit, length = 400)
f =(1/sigma*sqrt(2*pi))*exp(-(t-micro)^2/(2*(sigma^2)))
plot(t, f, type = "l", lwd = 1)
}
normal_rule_density(6, 0, 1)
zconfidence_interval = function(niv_inc, medie_sel, esan, disp) {
alfa = niv_inc
selection_mean = medie_sel
n = esan
sigma = sqrt(disp)
critical_z = qnorm(1-alfa/2, 0, 1)
a = selection_mean - critical_z * sigma / sqrt(n)
b = selection_mean + critical_z * sigma / sqrt(n)
interval = c(a,b)
interval
}
zconfidence_interval(0.1, 20, 100, 9)
# III.1
zconfidence_interval = function(niv_inc, medie_sel, esan, disp) {
alfa = niv_inc
selection_mean = medie_sel
n = esan
sigma = sqrt(disp)
critical_z = qnorm(1-alfa/2, 0, 1)
a = selection_mean - critical_z * sigma / sqrt(n)
b = selection_mean + critical_z * sigma / sqrt(n)
interval = c(a,b)
interval
}
zconfidence_interval(0.1, 20, 100, 9)
# III.2
zconfidence_interval(0.1,67.53, 25, 100)
zconfidence_interval = function(niv_inc, medie_sel, esan, disp) {
alfa = niv_inc
selection_mean = medie_sel
n = esan
sigma = sqrt(disp)
critical_z = qnorm(1-alfa/2, 0, 1)
a = selection_mean - critical_z * sigma / sqrt(n)
b = selection_mean + critical_z * sigma / sqrt(n)
interval = c(a,b)
interval
}
zconfidence_interval(0.1, 20, 100, 9)
# III.2
zconfidence_interval(0.1,67.53, 25, 100)
## III.4
zconfidence_interval(0.01, 1280, 100, 140)
t_conf_interval = function(niv_inc, medie_sel, esan, deviatie) {
alfa = niv_inc
selection_mean = medie_sel
n = esan
s = deviatie
se = s/sqrt(n)
critical_t = qt(1-alfa/2, n-1)
a = selection_mean - critical_t * se
b = selection_mean + critical_t * se
interval = c(a,b)
interval
}
t_conf_interval(0.05, 3.3, 60, 0.4)
t_conf_interval = function(niv_inc, medie_sel, esan, deviatie) {
alfa = niv_inc
selection_mean = medie_sel
n = esan
s = deviatie
se = s/sqrt(n)
critical_t = qt(1-alfa/2, n-1)
a = selection_mean - critical_t * se
b = selection_mean + critical_t * se
interval = c(a,b)
interval
}
t_conf_interval(0.05, 3.3, 60, 0.4)
## IV.2
t_conf_interval(0.01, 44.65, 196, sqrt(2.25))
t_conf_interval = function(niv_inc, medie_sel, esan, deviatie) {
alfa = niv_inc
selection_mean = medie_sel
n = esan
s = deviatie
se = s/sqrt(n)
critical_t = qt(1-alfa/2, n-1)
a = selection_mean - critical_t * se
b = selection_mean + critical_t * se
interval = c(a,b)
interval
}
t_conf_interval(0.05, 3.3, 60, 0.4)
## IV.2
t_conf_interval(0.01, 44.65, 196, sqrt(2.25))
## IV.5
x=c(12,11,12,10,11,12,13,12,11,11,13,14,10)
t_conf_interval( 0.1, mean(x), length(x), sd(x))
t_conf_interval(0.05, mean(x), length(x), sd(x))
t_conf_interval(0.01, mean(x), length(x), sd(x))
test_proportion = function(alfa, n, succese, p0)
{
p_prim = succese/n
if(p_prim > p0) print("Ip asimetrica la dreapta")
else print("Ip asimetrica la stanga")
z_score = (p_prim - p0) / sqrt(p0*(1-p0)/n)
z_critical = qnorm(1 - alfa, 0, 1)
print(z_score)
print(z_critical)
if(z_score < z_critical) print("Scor mai mic decat valoarea critica")
else print("Scor mai mare decat valoarea critica")
if(z_score < z_critical)
{
if(p_prim < p0) print("Ip nula este respinsa!")
## else print("Nu exista suficiente dovezi pentru a respinge ipoteza nula!")
}
if(z_score>z_critical)
{
if(p_prim>p0) print("Ip nula este respinsa!")
## else print("! nu exista suficiente dovezi pentru a respinge ipoteza nula !")
}
}
test_proportion(0.01, 100, 63, 0.6)
test_proportion = function(alfa, n, succese, p0)
{
p_prim = succese/n
if(p_prim > p0) print("Ip asimetrica la dreapta")
else print("Ip asimetrica la stanga")
z_score = (p_prim - p0) / sqrt(p0*(1-p0)/n)
z_critical = qnorm(1 - alfa, 0, 1)
print(z_score)
print(z_critical)
if(z_score < z_critical) print("Scor mai mic decat valoarea critica")
else print("Scor mai mare decat valoarea critica")
if(z_score < z_critical)
{
if(p_prim < p0) print("Ip nula este respinsa!")
}
else print("Ip nula este acceptata")
if(z_score > z_critical)
{
if(p_prim > p0) print("Ip nula este respinsa!")
}
else print("Ip nula este acceptata")
}
test_proportion(0.01, 100, 63, 0.6)
test_proportion = function(alfa, n, succese, p0)
{
ok=0
p_prim = succese/n
if(p_prim > p0) print("Ip asimetrica la dreapta")
else print("Ip asimetrica la stanga")
z_score = (p_prim - p0) / sqrt(p0*(1-p0)/n)
z_critical = qnorm(1 - alfa, 0, 1)
print(z_score)
print(z_critical)
if(z_score < z_critical) print("Scor mai mic decat valoarea critica")
else print("Scor mai mare decat valoarea critica")
if(z_score < z_critical)
{
if(p_prim < p0) {
print("Ip nula este respinsa!")
ok=1
}
}
if(z_score > z_critical)
{
if(p_prim > p0) {
print("Ip nula este respinsa!")
ok=1;
}
}
if (ok==0) else print("Ip nula este acceptata")
}
test_proportion(0.01, 100, 63, 0.6)
test_proportion = function(alfa, n, succese, p0)
{
ok=0
p_prim = succese/n
if(p_prim > p0) print("Ip asimetrica la dreapta")
else print("Ip asimetrica la stanga")
z_score = (p_prim - p0) / sqrt(p0*(1-p0)/n)
z_critical = qnorm(1 - alfa, 0, 1)
print(z_score)
print(z_critical)
if(z_score < z_critical) print("Scor mai mic decat valoarea critica")
else print("Scor mai mare decat valoarea critica")
if(z_score < z_critical)
{
if(p_prim < p0) {
print("Ip nula este respinsa!")
ok=1
}
}
if(z_score > z_critical)
{
if(p_prim > p0) {
print("Ip nula este respinsa!")
ok=1
}
}
if (ok==0) else print("Ip nula este acceptata")
}
test_proportion(0.01, 100, 63, 0.6)
test_proportion = function(alfa, n, succese, p0)
{
ok=0
p_prim = succese/n
if(p_prim > p0) print("Ip asimetrica la dreapta")
else print("Ip asimetrica la stanga")
z_score = (p_prim - p0) / sqrt(p0*(1-p0)/n)
z_critical = qnorm(1 - alfa, 0, 1)
print(z_score)
print(z_critical)
if(z_score < z_critical) print("Scor mai mic decat valoarea critica")
else print("Scor mai mare decat valoarea critica")
if(z_score < z_critical)
{
if(p_prim < p0) {
print("Ip nula este respinsa!")
ok=1
}
}
if(z_score > z_critical)
{
if(p_prim > p0) {
print("Ip nula este respinsa!")
ok=1
}
}
if(ok==0) print("Ip nula este acceptata")
}
test_proportion(0.01, 100, 63, 0.6)
test_proportion = function(alfa, n, succese, p0)
{
ok=0
p_prim = succese/n
z_score = (p_prim - p0) / sqrt(p0*(1-p0)/n)
if(p_prim > p0) {
print("Ip asimetrica la dreapta")
z_critical = qnorm(1 - alfa, 0, 1)
if(z_score < z_critical)
{
if(p_prim < p0) {
print("Ip nula este respinsa!")
ok=1
}
}
if(ok==0) print("Ip nula este acceptata")
}
else {
print("Ip asimetrica la stanga")
z_critical = qnorm(alfa, 0, 1)
if(z_score > z_critical)
{
if(p_prim > p0) {
print("Ip nula este respinsa!")
ok=1
}
}
if(ok==0) print("Ip nula este acceptata")
}
# print(z_score)
# print(z_critical)
# if(z_score < z_critical) print("Scor mai mic decat valoarea critica")
# else print("Scor mai mare decat valoarea critica")
}
test_proportion(0.01, 100, 63, 0.6)
test_proportion = function(alfa, n, succese, p0)
{
ok=0
p_prim = succese/n
z_score = (p_prim - p0) / sqrt(p0*(1-p0)/n)
if(p_prim > p0) {
print("Ip asimetrica la dreapta")
z_critical = qnorm(1 - alfa, 0, 1)
if(z_score < z_critical)
{
if(p_prim < p0) {
print("Ip nula este respinsa!")
ok=1
}
}
if(ok==0) print("Ip nula este acceptata")
}
else {
print("Ip asimetrica la stanga")
z_critical = qnorm(alfa, 0, 1)
if(z_score > z_critical)
{
if(p_prim > p0) {
print("Ip nula este respinsa!")
ok=1
}
}
if(ok==0) print("Ip nula este acceptata")
}
# print(z_score)
# print(z_critical)
# if(z_score < z_critical) print("Scor mai mic decat valoarea critica")
# else print("Scor mai mare decat valoarea critica")
}
test_proportion(0.01, 100, 63, 0.6)
# V.2
test_proportion(0.05, 150, 20, 0.1)
## V.1
test_proportion = function(alfa, n, succese, p0)
{
ok=0
p_prim = succese/n
z_score = (p_prim - p0) / sqrt(p0*(1-p0)/n)
if(p_prim > p0) {
print("Ip asimetrica la dreapta")
z_critical = qnorm(1 - alfa, 0, 1)
if(z_score < z_critical)
{
if(p_prim < p0) {
print("Ip nula este respinsa!")
ok=1
}
}
if(ok==0) print("Ip nula este acceptata")
}
else if(p_prim < p0){
print("Ip asimetrica la stanga")
z_critical = qnorm(alfa, 0, 1)
if(z_score > z_critical)
{
if(p_prim > p0) {
print("Ip nula este respinsa!")
ok=1
}
}
if(ok==0) print("Ip nula este acceptata")
}
else {
print("Ip simetrica")
z_critical = qnorm(alfa/z_score, 0, 1)
if(z_score > z_critical)
{
if(p_prim > p0) {
print("Ip nula este respinsa!")
ok=1
}
}
if(ok==0) print("Ip nula este acceptata")
}
# print(z_score)
# print(z_critical)
# if(z_score < z_critical) print("Scor mai mic decat valoarea critica")
# else print("Scor mai mare decat valoarea critica")
}
test_proportion(0.01, 100, 63, 0.6)
